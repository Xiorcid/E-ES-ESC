ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB45:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include "stdbool.h"
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 2


  34:Core/Src/main.c **** #define PH_H  1
  35:Core/Src/main.c **** #define PH_L  0
  36:Core/Src/main.c **** #define PH_Z  -1
  37:Core/Src/main.c **** /* USER CODE END PD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* USER CODE END PM */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  45:Core/Src/main.c **** ADC_HandleTypeDef hadc;
  46:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc;
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** TIM_HandleTypeDef htim1;
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE BEGIN PV */
  51:Core/Src/main.c **** uint8_t duty;
  52:Core/Src/main.c **** uint32_t value_adc;
  53:Core/Src/main.c **** bool halls[3];
  54:Core/Src/main.c **** /* USER CODE END PV */
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  57:Core/Src/main.c **** void SystemClock_Config(void);
  58:Core/Src/main.c **** static void MX_GPIO_Init(void);
  59:Core/Src/main.c **** static void MX_DMA_Init(void);
  60:Core/Src/main.c **** static void MX_ADC_Init(void);
  61:Core/Src/main.c **** static void MX_TIM1_Init(void);
  62:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  63:Core/Src/main.c **** void setPhases(int PH1, int PH2, int PH3);
  64:Core/Src/main.c **** /* USER CODE END PFP */
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  67:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /* USER CODE END 0 */
  70:Core/Src/main.c **** 
  71:Core/Src/main.c **** /**
  72:Core/Src/main.c ****   * @brief  The application entry point.
  73:Core/Src/main.c ****   * @retval int
  74:Core/Src/main.c ****   */
  75:Core/Src/main.c **** int main(void)
  76:Core/Src/main.c **** {
  77:Core/Src/main.c **** 
  78:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c ****   /* USER CODE END 1 */
  81:Core/Src/main.c **** 
  82:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  83:Core/Src/main.c **** 
  84:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  85:Core/Src/main.c ****   HAL_Init();
  86:Core/Src/main.c **** 
  87:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  88:Core/Src/main.c **** 
  89:Core/Src/main.c ****   /* USER CODE END Init */
  90:Core/Src/main.c **** 
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 3


  91:Core/Src/main.c ****   /* Configure the system clock */
  92:Core/Src/main.c ****   SystemClock_Config();
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****   /* USER CODE END SysInit */
  97:Core/Src/main.c **** 
  98:Core/Src/main.c ****   /* Initialize all configured peripherals */
  99:Core/Src/main.c ****   MX_GPIO_Init();
 100:Core/Src/main.c ****   MX_DMA_Init();
 101:Core/Src/main.c ****   MX_ADC_Init();
 102:Core/Src/main.c ****   MX_TIM1_Init();
 103:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 104:Core/Src/main.c ****   HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 105:Core/Src/main.c ****   HAL_Delay(200);
 106:Core/Src/main.c ****   HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc,(uint32_t*)&value_adc,1);
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 111:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 112:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   setPhases(PH_Z, PH_L, PH_H);
 115:Core/Src/main.c ****   HAL_Delay(100);
 116:Core/Src/main.c ****   setPhases(PH_Z, PH_Z, PH_Z);
 117:Core/Src/main.c ****   /* USER CODE END 2 */
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****   /* Infinite loop */
 120:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 121:Core/Src/main.c ****   while (1)
 122:Core/Src/main.c ****   {   
 123:Core/Src/main.c ****     halls[0] = HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin);
 124:Core/Src/main.c ****     halls[1] = HAL_GPIO_ReadPin(H2_GPIO_Port, H2_Pin);
 125:Core/Src/main.c ****     halls[2] = HAL_GPIO_ReadPin(H3_GPIO_Port, H3_Pin); 
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****     duty = (value_adc - 0) * (255 - 0) / (4095 - 0) + 0;
 128:Core/Src/main.c **** 
 129:Core/Src/main.c ****     // SET CORRECT CONFIG
 130:Core/Src/main.c ****     if(!halls[0] && !halls[1] && halls[2]){
 131:Core/Src/main.c ****       setPhases(PH_Z, PH_L, PH_H);
 132:Core/Src/main.c ****     }else if(halls[0] && !halls[1] && halls[2]){
 133:Core/Src/main.c ****       setPhases(PH_H, PH_L, PH_Z);
 134:Core/Src/main.c ****     }else if(halls[0] && !halls[1] && !halls[2]){
 135:Core/Src/main.c ****       setPhases(PH_H, PH_Z, PH_L);
 136:Core/Src/main.c ****     }else if(halls[0] && halls[1] && !halls[2]){
 137:Core/Src/main.c ****       setPhases(PH_Z, PH_H, PH_L);
 138:Core/Src/main.c ****     }else if(!halls[0] && halls[1] && !halls[2]){
 139:Core/Src/main.c ****       setPhases(PH_L, PH_H, PH_Z);
 140:Core/Src/main.c ****     }else if(!halls[0] && halls[1] && halls[2]){
 141:Core/Src/main.c ****       setPhases(PH_L, PH_Z, PH_H);
 142:Core/Src/main.c ****     }else{ // UNEXPECTED VALUE
 143:Core/Src/main.c ****       setPhases(PH_Z, PH_Z, PH_Z); // DISABLE PHASES
 144:Core/Src/main.c ****     }     
 145:Core/Src/main.c **** 
 146:Core/Src/main.c ****     HAL_ADC_Start(&hadc);                                                                          
 147:Core/Src/main.c ****     /* USER CODE END WHILE */
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 4


 148:Core/Src/main.c **** 
 149:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 150:Core/Src/main.c ****   }
 151:Core/Src/main.c ****   /* USER CODE END 3 */
 152:Core/Src/main.c **** }
 153:Core/Src/main.c **** 
 154:Core/Src/main.c **** /**
 155:Core/Src/main.c ****   * @brief System Clock Configuration
 156:Core/Src/main.c ****   * @retval None
 157:Core/Src/main.c ****   */
 158:Core/Src/main.c **** void SystemClock_Config(void)
 159:Core/Src/main.c **** {
 160:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 161:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 164:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 165:Core/Src/main.c ****   */
 166:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 167:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 168:Core/Src/main.c ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 169:Core/Src/main.c ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 170:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 171:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 172:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 173:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 174:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 175:Core/Src/main.c ****   {
 176:Core/Src/main.c ****     Error_Handler();
 177:Core/Src/main.c ****   }
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 180:Core/Src/main.c ****   */
 181:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 182:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 183:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 184:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 185:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 186:Core/Src/main.c **** 
 187:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 188:Core/Src/main.c ****   {
 189:Core/Src/main.c ****     Error_Handler();
 190:Core/Src/main.c ****   }
 191:Core/Src/main.c **** }
 192:Core/Src/main.c **** 
 193:Core/Src/main.c **** /**
 194:Core/Src/main.c ****   * @brief ADC Initialization Function
 195:Core/Src/main.c ****   * @param None
 196:Core/Src/main.c ****   * @retval None
 197:Core/Src/main.c ****   */
 198:Core/Src/main.c **** static void MX_ADC_Init(void)
 199:Core/Src/main.c **** {
 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****   /* USER CODE BEGIN ADC_Init 0 */
 202:Core/Src/main.c **** 
 203:Core/Src/main.c ****   /* USER CODE END ADC_Init 0 */
 204:Core/Src/main.c **** 
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 5


 205:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****   /* USER CODE BEGIN ADC_Init 1 */
 208:Core/Src/main.c **** 
 209:Core/Src/main.c ****   /* USER CODE END ADC_Init 1 */
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 212:Core/Src/main.c ****   */
 213:Core/Src/main.c ****   hadc.Instance = ADC1;
 214:Core/Src/main.c ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 215:Core/Src/main.c ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 216:Core/Src/main.c ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 217:Core/Src/main.c ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 218:Core/Src/main.c ****   hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 219:Core/Src/main.c ****   hadc.Init.LowPowerAutoWait = DISABLE;
 220:Core/Src/main.c ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 221:Core/Src/main.c ****   hadc.Init.ContinuousConvMode = ENABLE;
 222:Core/Src/main.c ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 223:Core/Src/main.c ****   hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 224:Core/Src/main.c ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 225:Core/Src/main.c ****   hadc.Init.DMAContinuousRequests = ENABLE;
 226:Core/Src/main.c ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 227:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
 228:Core/Src/main.c ****   {
 229:Core/Src/main.c ****     Error_Handler();
 230:Core/Src/main.c ****   }
 231:Core/Src/main.c **** 
 232:Core/Src/main.c ****   /** Configure for the selected ADC regular channel to be converted.
 233:Core/Src/main.c ****   */
 234:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
 235:Core/Src/main.c ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 236:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 237:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 238:Core/Src/main.c ****   {
 239:Core/Src/main.c ****     Error_Handler();
 240:Core/Src/main.c ****   }
 241:Core/Src/main.c ****   /* USER CODE BEGIN ADC_Init 2 */
 242:Core/Src/main.c **** 
 243:Core/Src/main.c ****   /* USER CODE END ADC_Init 2 */
 244:Core/Src/main.c **** 
 245:Core/Src/main.c **** }
 246:Core/Src/main.c **** 
 247:Core/Src/main.c **** /**
 248:Core/Src/main.c ****   * @brief TIM1 Initialization Function
 249:Core/Src/main.c ****   * @param None
 250:Core/Src/main.c ****   * @retval None
 251:Core/Src/main.c ****   */
 252:Core/Src/main.c **** static void MX_TIM1_Init(void)
 253:Core/Src/main.c **** {
 254:Core/Src/main.c **** 
 255:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 256:Core/Src/main.c **** 
 257:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 258:Core/Src/main.c **** 
 259:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 260:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 261:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 6


 262:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 263:Core/Src/main.c **** 
 264:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 265:Core/Src/main.c **** 
 266:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 267:Core/Src/main.c ****   htim1.Instance = TIM1;
 268:Core/Src/main.c ****   htim1.Init.Prescaler = 5;
 269:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 270:Core/Src/main.c ****   htim1.Init.Period = 255;
 271:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 272:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 273:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 274:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 275:Core/Src/main.c ****   {
 276:Core/Src/main.c ****     Error_Handler();
 277:Core/Src/main.c ****   }
 278:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 279:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 280:Core/Src/main.c ****   {
 281:Core/Src/main.c ****     Error_Handler();
 282:Core/Src/main.c ****   }
 283:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 284:Core/Src/main.c ****   {
 285:Core/Src/main.c ****     Error_Handler();
 286:Core/Src/main.c ****   }
 287:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 288:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 289:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 290:Core/Src/main.c ****   {
 291:Core/Src/main.c ****     Error_Handler();
 292:Core/Src/main.c ****   }
 293:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 294:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 295:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 296:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 297:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 298:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 299:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 300:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 301:Core/Src/main.c ****   {
 302:Core/Src/main.c ****     Error_Handler();
 303:Core/Src/main.c ****   }
 304:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 305:Core/Src/main.c ****   {
 306:Core/Src/main.c ****     Error_Handler();
 307:Core/Src/main.c ****   }
 308:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 309:Core/Src/main.c ****   {
 310:Core/Src/main.c ****     Error_Handler();
 311:Core/Src/main.c ****   }
 312:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 313:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 314:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 315:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 316:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 317:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 318:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 7


 319:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 320:Core/Src/main.c ****   {
 321:Core/Src/main.c ****     Error_Handler();
 322:Core/Src/main.c ****   }
 323:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
 324:Core/Src/main.c **** 
 325:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
 326:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim1);
 327:Core/Src/main.c **** 
 328:Core/Src/main.c **** }
 329:Core/Src/main.c **** 
 330:Core/Src/main.c **** /**
 331:Core/Src/main.c ****   * Enable DMA controller clock
 332:Core/Src/main.c ****   */
 333:Core/Src/main.c **** static void MX_DMA_Init(void)
 334:Core/Src/main.c **** {
 335:Core/Src/main.c **** 
 336:Core/Src/main.c ****   /* DMA controller clock enable */
 337:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 338:Core/Src/main.c **** 
 339:Core/Src/main.c ****   /* DMA interrupt init */
 340:Core/Src/main.c ****   /* DMA1_Channel1_IRQn interrupt configuration */
 341:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 342:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 343:Core/Src/main.c **** 
 344:Core/Src/main.c **** }
 345:Core/Src/main.c **** 
 346:Core/Src/main.c **** /**
 347:Core/Src/main.c ****   * @brief GPIO Initialization Function
 348:Core/Src/main.c ****   * @param None
 349:Core/Src/main.c ****   * @retval None
 350:Core/Src/main.c ****   */
 351:Core/Src/main.c **** static void MX_GPIO_Init(void)
 352:Core/Src/main.c **** {
  26              		.loc 1 352 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 40
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 70B5     		push	{r4, r5, r6, lr}
  31              		.cfi_def_cfa_offset 16
  32              		.cfi_offset 4, -16
  33              		.cfi_offset 5, -12
  34              		.cfi_offset 6, -8
  35              		.cfi_offset 14, -4
  36 0002 8AB0     		sub	sp, sp, #40
  37              		.cfi_def_cfa_offset 56
 353:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 353 3 view .LVU1
  39              		.loc 1 353 20 is_stmt 0 view .LVU2
  40 0004 1422     		movs	r2, #20
  41 0006 0021     		movs	r1, #0
  42 0008 05A8     		add	r0, sp, #20
  43 000a FFF7FEFF 		bl	memset
  44              	.LVL0:
 354:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 355:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 356:Core/Src/main.c **** 
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 8


 357:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 358:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  45              		.loc 1 358 3 is_stmt 1 view .LVU3
  46              	.LBB4:
  47              		.loc 1 358 3 view .LVU4
  48              		.loc 1 358 3 view .LVU5
  49 000e 214B     		ldr	r3, .L2
  50 0010 5A69     		ldr	r2, [r3, #20]
  51 0012 8021     		movs	r1, #128
  52 0014 0903     		lsls	r1, r1, #12
  53 0016 0A43     		orrs	r2, r1
  54 0018 5A61     		str	r2, [r3, #20]
  55              		.loc 1 358 3 view .LVU6
  56 001a 5A69     		ldr	r2, [r3, #20]
  57 001c 0A40     		ands	r2, r1
  58 001e 0192     		str	r2, [sp, #4]
  59              		.loc 1 358 3 view .LVU7
  60 0020 019A     		ldr	r2, [sp, #4]
  61              	.LBE4:
  62              		.loc 1 358 3 view .LVU8
 359:Core/Src/main.c ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  63              		.loc 1 359 3 view .LVU9
  64              	.LBB5:
  65              		.loc 1 359 3 view .LVU10
  66              		.loc 1 359 3 view .LVU11
  67 0022 5A69     		ldr	r2, [r3, #20]
  68 0024 8021     		movs	r1, #128
  69 0026 C903     		lsls	r1, r1, #15
  70 0028 0A43     		orrs	r2, r1
  71 002a 5A61     		str	r2, [r3, #20]
  72              		.loc 1 359 3 view .LVU12
  73 002c 5A69     		ldr	r2, [r3, #20]
  74 002e 0A40     		ands	r2, r1
  75 0030 0292     		str	r2, [sp, #8]
  76              		.loc 1 359 3 view .LVU13
  77 0032 029A     		ldr	r2, [sp, #8]
  78              	.LBE5:
  79              		.loc 1 359 3 view .LVU14
 360:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  80              		.loc 1 360 3 view .LVU15
  81              	.LBB6:
  82              		.loc 1 360 3 view .LVU16
  83              		.loc 1 360 3 view .LVU17
  84 0034 5A69     		ldr	r2, [r3, #20]
  85 0036 8021     		movs	r1, #128
  86 0038 8902     		lsls	r1, r1, #10
  87 003a 0A43     		orrs	r2, r1
  88 003c 5A61     		str	r2, [r3, #20]
  89              		.loc 1 360 3 view .LVU18
  90 003e 5A69     		ldr	r2, [r3, #20]
  91 0040 0A40     		ands	r2, r1
  92 0042 0392     		str	r2, [sp, #12]
  93              		.loc 1 360 3 view .LVU19
  94 0044 039A     		ldr	r2, [sp, #12]
  95              	.LBE6:
  96              		.loc 1 360 3 view .LVU20
 361:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 9


  97              		.loc 1 361 3 view .LVU21
  98              	.LBB7:
  99              		.loc 1 361 3 view .LVU22
 100              		.loc 1 361 3 view .LVU23
 101 0046 5A69     		ldr	r2, [r3, #20]
 102 0048 8021     		movs	r1, #128
 103 004a C902     		lsls	r1, r1, #11
 104 004c 0A43     		orrs	r2, r1
 105 004e 5A61     		str	r2, [r3, #20]
 106              		.loc 1 361 3 view .LVU24
 107 0050 5B69     		ldr	r3, [r3, #20]
 108 0052 0B40     		ands	r3, r1
 109 0054 0493     		str	r3, [sp, #16]
 110              		.loc 1 361 3 view .LVU25
 111 0056 049B     		ldr	r3, [sp, #16]
 112              	.LBE7:
 113              		.loc 1 361 3 view .LVU26
 362:Core/Src/main.c **** 
 363:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 364:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, LED_Pin|PH1L_Pin|PH2L_Pin|PH3L_Pin, GPIO_PIN_RESET);
 114              		.loc 1 364 3 view .LVU27
 115 0058 8E24     		movs	r4, #142
 116 005a A401     		lsls	r4, r4, #6
 117 005c 0E4E     		ldr	r6, .L2+4
 118 005e 0022     		movs	r2, #0
 119 0060 2100     		movs	r1, r4
 120 0062 3000     		movs	r0, r6
 121 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
 122              	.LVL1:
 365:Core/Src/main.c **** 
 366:Core/Src/main.c ****   /*Configure GPIO pins : LED_Pin PH1L_Pin PH2L_Pin PH3L_Pin */
 367:Core/Src/main.c ****   GPIO_InitStruct.Pin = LED_Pin|PH1L_Pin|PH2L_Pin|PH3L_Pin;
 123              		.loc 1 367 3 view .LVU28
 124              		.loc 1 367 23 is_stmt 0 view .LVU29
 125 0068 0594     		str	r4, [sp, #20]
 368:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 126              		.loc 1 368 3 is_stmt 1 view .LVU30
 127              		.loc 1 368 24 is_stmt 0 view .LVU31
 128 006a 0125     		movs	r5, #1
 129 006c 0695     		str	r5, [sp, #24]
 369:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 130              		.loc 1 369 3 is_stmt 1 view .LVU32
 131              		.loc 1 369 24 is_stmt 0 view .LVU33
 132 006e 0024     		movs	r4, #0
 133 0070 0794     		str	r4, [sp, #28]
 370:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 134              		.loc 1 370 3 is_stmt 1 view .LVU34
 135              		.loc 1 370 25 is_stmt 0 view .LVU35
 136 0072 0894     		str	r4, [sp, #32]
 371:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 137              		.loc 1 371 3 is_stmt 1 view .LVU36
 138 0074 05A9     		add	r1, sp, #20
 139 0076 3000     		movs	r0, r6
 140 0078 FFF7FEFF 		bl	HAL_GPIO_Init
 141              	.LVL2:
 372:Core/Src/main.c **** 
 373:Core/Src/main.c ****   /*Configure GPIO pins : H1_Pin H2_Pin H3_Pin */
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 10


 374:Core/Src/main.c ****   GPIO_InitStruct.Pin = H1_Pin|H2_Pin|H3_Pin;
 142              		.loc 1 374 3 view .LVU37
 143              		.loc 1 374 23 is_stmt 0 view .LVU38
 144 007c E023     		movs	r3, #224
 145 007e 1B02     		lsls	r3, r3, #8
 146 0080 0593     		str	r3, [sp, #20]
 375:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 147              		.loc 1 375 3 is_stmt 1 view .LVU39
 148              		.loc 1 375 24 is_stmt 0 view .LVU40
 149 0082 0694     		str	r4, [sp, #24]
 376:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 150              		.loc 1 376 3 is_stmt 1 view .LVU41
 151              		.loc 1 376 24 is_stmt 0 view .LVU42
 152 0084 0795     		str	r5, [sp, #28]
 377:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 153              		.loc 1 377 3 is_stmt 1 view .LVU43
 154 0086 05A9     		add	r1, sp, #20
 155 0088 0448     		ldr	r0, .L2+8
 156 008a FFF7FEFF 		bl	HAL_GPIO_Init
 157              	.LVL3:
 378:Core/Src/main.c **** 
 379:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 380:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 381:Core/Src/main.c **** }
 158              		.loc 1 381 1 is_stmt 0 view .LVU44
 159 008e 0AB0     		add	sp, sp, #40
 160              		@ sp needed
 161 0090 70BD     		pop	{r4, r5, r6, pc}
 162              	.L3:
 163 0092 C046     		.align	2
 164              	.L2:
 165 0094 00100240 		.word	1073876992
 166 0098 00080048 		.word	1207961600
 167 009c 00040048 		.word	1207960576
 168              		.cfi_endproc
 169              	.LFE45:
 171              		.section	.text.MX_DMA_Init,"ax",%progbits
 172              		.align	1
 173              		.syntax unified
 174              		.code	16
 175              		.thumb_func
 177              	MX_DMA_Init:
 178              	.LFB44:
 334:Core/Src/main.c **** 
 179              		.loc 1 334 1 is_stmt 1 view -0
 180              		.cfi_startproc
 181              		@ args = 0, pretend = 0, frame = 8
 182              		@ frame_needed = 0, uses_anonymous_args = 0
 183 0000 00B5     		push	{lr}
 184              		.cfi_def_cfa_offset 4
 185              		.cfi_offset 14, -4
 186 0002 83B0     		sub	sp, sp, #12
 187              		.cfi_def_cfa_offset 16
 337:Core/Src/main.c **** 
 188              		.loc 1 337 3 view .LVU46
 189              	.LBB8:
 337:Core/Src/main.c **** 
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 11


 190              		.loc 1 337 3 view .LVU47
 337:Core/Src/main.c **** 
 191              		.loc 1 337 3 view .LVU48
 192 0004 094A     		ldr	r2, .L5
 193 0006 5169     		ldr	r1, [r2, #20]
 194 0008 0123     		movs	r3, #1
 195 000a 1943     		orrs	r1, r3
 196 000c 5161     		str	r1, [r2, #20]
 337:Core/Src/main.c **** 
 197              		.loc 1 337 3 view .LVU49
 198 000e 5269     		ldr	r2, [r2, #20]
 199 0010 1340     		ands	r3, r2
 200 0012 0193     		str	r3, [sp, #4]
 337:Core/Src/main.c **** 
 201              		.loc 1 337 3 view .LVU50
 202 0014 019B     		ldr	r3, [sp, #4]
 203              	.LBE8:
 337:Core/Src/main.c **** 
 204              		.loc 1 337 3 view .LVU51
 341:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 205              		.loc 1 341 3 view .LVU52
 206 0016 0022     		movs	r2, #0
 207 0018 0021     		movs	r1, #0
 208 001a 0920     		movs	r0, #9
 209 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 210              	.LVL4:
 342:Core/Src/main.c **** 
 211              		.loc 1 342 3 view .LVU53
 212 0020 0920     		movs	r0, #9
 213 0022 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 214              	.LVL5:
 344:Core/Src/main.c **** 
 215              		.loc 1 344 1 is_stmt 0 view .LVU54
 216 0026 03B0     		add	sp, sp, #12
 217              		@ sp needed
 218 0028 00BD     		pop	{pc}
 219              	.L6:
 220 002a C046     		.align	2
 221              	.L5:
 222 002c 00100240 		.word	1073876992
 223              		.cfi_endproc
 224              	.LFE44:
 226              		.section	.text.setPhases,"ax",%progbits
 227              		.align	1
 228              		.global	setPhases
 229              		.syntax unified
 230              		.code	16
 231              		.thumb_func
 233              	setPhases:
 234              	.LVL6:
 235              	.LFB46:
 382:Core/Src/main.c **** 
 383:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 384:Core/Src/main.c **** 
 385:Core/Src/main.c **** void setPhases(int PH1, int PH2, int PH3){
 236              		.loc 1 385 42 is_stmt 1 view -0
 237              		.cfi_startproc
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 12


 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240              		.loc 1 385 42 is_stmt 0 view .LVU56
 241 0000 70B5     		push	{r4, r5, r6, lr}
 242              		.cfi_def_cfa_offset 16
 243              		.cfi_offset 4, -16
 244              		.cfi_offset 5, -12
 245              		.cfi_offset 6, -8
 246              		.cfi_offset 14, -4
 247 0002 0D00     		movs	r5, r1
 248 0004 1400     		movs	r4, r2
 386:Core/Src/main.c ****   if (PH1 != -1){
 249              		.loc 1 386 3 is_stmt 1 view .LVU57
 250              		.loc 1 386 6 is_stmt 0 view .LVU58
 251 0006 431C     		adds	r3, r0, #1
 252 0008 24D0     		beq	.L8
 387:Core/Src/main.c ****     TIM1->CCR1 = duty*PH1;
 253              		.loc 1 387 5 is_stmt 1 view .LVU59
 254              		.loc 1 387 22 is_stmt 0 view .LVU60
 255 000a 214B     		ldr	r3, .L14
 256 000c 1B78     		ldrb	r3, [r3]
 257 000e 4343     		muls	r3, r0
 258              		.loc 1 387 16 view .LVU61
 259 0010 204A     		ldr	r2, .L14+4
 260              	.LVL7:
 261              		.loc 1 387 16 view .LVU62
 262 0012 5363     		str	r3, [r2, #52]
 388:Core/Src/main.c ****     HAL_GPIO_WritePin(PH1L_GPIO_Port, PH1L_Pin, PH1);
 263              		.loc 1 388 5 is_stmt 1 view .LVU63
 264 0014 C2B2     		uxtb	r2, r0
 265 0016 8021     		movs	r1, #128
 266              	.LVL8:
 267              		.loc 1 388 5 is_stmt 0 view .LVU64
 268 0018 1F48     		ldr	r0, .L14+8
 269              	.LVL9:
 270              		.loc 1 388 5 view .LVU65
 271 001a FFF7FEFF 		bl	HAL_GPIO_WritePin
 272              	.LVL10:
 273              	.L9:
 389:Core/Src/main.c ****   }else{
 390:Core/Src/main.c ****     TIM1->CCR1 = 0;
 391:Core/Src/main.c ****     HAL_GPIO_WritePin(PH1L_GPIO_Port, PH1L_Pin, GPIO_PIN_SET);
 392:Core/Src/main.c ****   }
 393:Core/Src/main.c **** 
 394:Core/Src/main.c ****   if (PH2 != -1) {
 274              		.loc 1 394 3 is_stmt 1 view .LVU66
 275              		.loc 1 394 6 is_stmt 0 view .LVU67
 276 001e 6B1C     		adds	r3, r5, #1
 277 0020 21D0     		beq	.L10
 395:Core/Src/main.c ****     TIM1->CCR2 = duty*PH2;
 278              		.loc 1 395 5 is_stmt 1 view .LVU68
 279              		.loc 1 395 22 is_stmt 0 view .LVU69
 280 0022 1B4B     		ldr	r3, .L14
 281 0024 1B78     		ldrb	r3, [r3]
 282 0026 6B43     		muls	r3, r5
 283              		.loc 1 395 16 view .LVU70
 284 0028 1A4A     		ldr	r2, .L14+4
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 13


 285 002a 9363     		str	r3, [r2, #56]
 396:Core/Src/main.c ****     HAL_GPIO_WritePin(PH2L_GPIO_Port, PH2L_Pin, PH2);
 286              		.loc 1 396 5 is_stmt 1 view .LVU71
 287 002c EAB2     		uxtb	r2, r5
 288 002e 8021     		movs	r1, #128
 289 0030 4900     		lsls	r1, r1, #1
 290 0032 1948     		ldr	r0, .L14+8
 291 0034 FFF7FEFF 		bl	HAL_GPIO_WritePin
 292              	.LVL11:
 293              	.L11:
 397:Core/Src/main.c ****   }else{
 398:Core/Src/main.c ****     TIM1->CCR2 = 0;
 399:Core/Src/main.c ****     HAL_GPIO_WritePin(PH2L_GPIO_Port, PH2L_Pin, GPIO_PIN_SET);
 400:Core/Src/main.c ****   }
 401:Core/Src/main.c **** 
 402:Core/Src/main.c ****   if (PH3 != -1) {
 294              		.loc 1 402 3 view .LVU72
 295              		.loc 1 402 6 is_stmt 0 view .LVU73
 296 0038 631C     		adds	r3, r4, #1
 297 003a 1ED0     		beq	.L12
 403:Core/Src/main.c ****     TIM1->CCR3 = duty*PH3;
 298              		.loc 1 403 5 is_stmt 1 view .LVU74
 299              		.loc 1 403 22 is_stmt 0 view .LVU75
 300 003c 144B     		ldr	r3, .L14
 301 003e 1B78     		ldrb	r3, [r3]
 302 0040 6343     		muls	r3, r4
 303              		.loc 1 403 16 view .LVU76
 304 0042 144A     		ldr	r2, .L14+4
 305 0044 D363     		str	r3, [r2, #60]
 404:Core/Src/main.c ****     HAL_GPIO_WritePin(PH3L_GPIO_Port, PH3L_Pin, PH3);
 306              		.loc 1 404 5 is_stmt 1 view .LVU77
 307 0046 E2B2     		uxtb	r2, r4
 308 0048 8021     		movs	r1, #128
 309 004a 8900     		lsls	r1, r1, #2
 310 004c 1248     		ldr	r0, .L14+8
 311 004e FFF7FEFF 		bl	HAL_GPIO_WritePin
 312              	.LVL12:
 313              	.L7:
 405:Core/Src/main.c ****   }else{
 406:Core/Src/main.c ****     TIM1->CCR3 = 0;
 407:Core/Src/main.c ****     HAL_GPIO_WritePin(PH3L_GPIO_Port, PH3L_Pin, GPIO_PIN_SET);
 408:Core/Src/main.c ****   }
 409:Core/Src/main.c **** }
 314              		.loc 1 409 1 is_stmt 0 view .LVU78
 315              		@ sp needed
 316              	.LVL13:
 317              	.LVL14:
 318              		.loc 1 409 1 view .LVU79
 319 0052 70BD     		pop	{r4, r5, r6, pc}
 320              	.LVL15:
 321              	.L8:
 390:Core/Src/main.c ****     HAL_GPIO_WritePin(PH1L_GPIO_Port, PH1L_Pin, GPIO_PIN_SET);
 322              		.loc 1 390 5 is_stmt 1 view .LVU80
 390:Core/Src/main.c ****     HAL_GPIO_WritePin(PH1L_GPIO_Port, PH1L_Pin, GPIO_PIN_SET);
 323              		.loc 1 390 16 is_stmt 0 view .LVU81
 324 0054 0F4B     		ldr	r3, .L14+4
 325 0056 0022     		movs	r2, #0
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 14


 326              	.LVL16:
 390:Core/Src/main.c ****     HAL_GPIO_WritePin(PH1L_GPIO_Port, PH1L_Pin, GPIO_PIN_SET);
 327              		.loc 1 390 16 view .LVU82
 328 0058 5A63     		str	r2, [r3, #52]
 391:Core/Src/main.c ****   }
 329              		.loc 1 391 5 is_stmt 1 view .LVU83
 330 005a 0132     		adds	r2, r2, #1
 331 005c 8021     		movs	r1, #128
 332              	.LVL17:
 391:Core/Src/main.c ****   }
 333              		.loc 1 391 5 is_stmt 0 view .LVU84
 334 005e 0E48     		ldr	r0, .L14+8
 335              	.LVL18:
 391:Core/Src/main.c ****   }
 336              		.loc 1 391 5 view .LVU85
 337 0060 FFF7FEFF 		bl	HAL_GPIO_WritePin
 338              	.LVL19:
 339 0064 DBE7     		b	.L9
 340              	.L10:
 398:Core/Src/main.c ****     HAL_GPIO_WritePin(PH2L_GPIO_Port, PH2L_Pin, GPIO_PIN_SET);
 341              		.loc 1 398 5 is_stmt 1 view .LVU86
 398:Core/Src/main.c ****     HAL_GPIO_WritePin(PH2L_GPIO_Port, PH2L_Pin, GPIO_PIN_SET);
 342              		.loc 1 398 16 is_stmt 0 view .LVU87
 343 0066 0B4B     		ldr	r3, .L14+4
 344 0068 0022     		movs	r2, #0
 345 006a 9A63     		str	r2, [r3, #56]
 399:Core/Src/main.c ****   }
 346              		.loc 1 399 5 is_stmt 1 view .LVU88
 347 006c 8021     		movs	r1, #128
 348 006e 0132     		adds	r2, r2, #1
 349 0070 4900     		lsls	r1, r1, #1
 350 0072 0948     		ldr	r0, .L14+8
 351 0074 FFF7FEFF 		bl	HAL_GPIO_WritePin
 352              	.LVL20:
 353 0078 DEE7     		b	.L11
 354              	.L12:
 406:Core/Src/main.c ****     HAL_GPIO_WritePin(PH3L_GPIO_Port, PH3L_Pin, GPIO_PIN_SET);
 355              		.loc 1 406 5 view .LVU89
 406:Core/Src/main.c ****     HAL_GPIO_WritePin(PH3L_GPIO_Port, PH3L_Pin, GPIO_PIN_SET);
 356              		.loc 1 406 16 is_stmt 0 view .LVU90
 357 007a 064B     		ldr	r3, .L14+4
 358 007c 0022     		movs	r2, #0
 359 007e DA63     		str	r2, [r3, #60]
 407:Core/Src/main.c ****   }
 360              		.loc 1 407 5 is_stmt 1 view .LVU91
 361 0080 8021     		movs	r1, #128
 362 0082 0132     		adds	r2, r2, #1
 363 0084 8900     		lsls	r1, r1, #2
 364 0086 0448     		ldr	r0, .L14+8
 365 0088 FFF7FEFF 		bl	HAL_GPIO_WritePin
 366              	.LVL21:
 367              		.loc 1 409 1 is_stmt 0 view .LVU92
 368 008c E1E7     		b	.L7
 369              	.L15:
 370 008e C046     		.align	2
 371              	.L14:
 372 0090 00000000 		.word	duty
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 15


 373 0094 002C0140 		.word	1073818624
 374 0098 00080048 		.word	1207961600
 375              		.cfi_endproc
 376              	.LFE46:
 378              		.section	.text.Error_Handler,"ax",%progbits
 379              		.align	1
 380              		.global	Error_Handler
 381              		.syntax unified
 382              		.code	16
 383              		.thumb_func
 385              	Error_Handler:
 386              	.LFB47:
 410:Core/Src/main.c **** /* USER CODE END 4 */
 411:Core/Src/main.c **** 
 412:Core/Src/main.c **** /**
 413:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 414:Core/Src/main.c ****   * @retval None
 415:Core/Src/main.c ****   */
 416:Core/Src/main.c **** void Error_Handler(void)
 417:Core/Src/main.c **** {
 387              		.loc 1 417 1 is_stmt 1 view -0
 388              		.cfi_startproc
 389              		@ Volatile: function does not return.
 390              		@ args = 0, pretend = 0, frame = 0
 391              		@ frame_needed = 0, uses_anonymous_args = 0
 392              		@ link register save eliminated.
 418:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 419:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 420:Core/Src/main.c ****   __disable_irq();
 393              		.loc 1 420 3 view .LVU94
 394              	.LBB9:
 395              	.LBI9:
 396              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 16


  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 17


  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 18


 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 397              		.loc 2 140 27 view .LVU95
 398              	.LBB10:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 399              		.loc 2 142 3 view .LVU96
 400              		.syntax divided
 401              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 402 0000 72B6     		cpsid i
 403              	@ 0 "" 2
 404              		.thumb
 405              		.syntax unified
 406              	.L17:
 407              	.LBE10:
 408              	.LBE9:
 421:Core/Src/main.c ****   while (1)
 409              		.loc 1 421 3 view .LVU97
 422:Core/Src/main.c ****   {
 423:Core/Src/main.c ****   }
 410              		.loc 1 423 3 view .LVU98
 421:Core/Src/main.c ****   while (1)
 411              		.loc 1 421 9 view .LVU99
 412 0002 FEE7     		b	.L17
 413              		.cfi_endproc
 414              	.LFE47:
 416              		.section	.text.MX_ADC_Init,"ax",%progbits
 417              		.align	1
 418              		.syntax unified
 419              		.code	16
 420              		.thumb_func
 422              	MX_ADC_Init:
 423              	.LFB42:
 199:Core/Src/main.c **** 
 424              		.loc 1 199 1 view -0
 425              		.cfi_startproc
 426              		@ args = 0, pretend = 0, frame = 16
 427              		@ frame_needed = 0, uses_anonymous_args = 0
 428 0000 00B5     		push	{lr}
 429              		.cfi_def_cfa_offset 4
 430              		.cfi_offset 14, -4
 431 0002 85B0     		sub	sp, sp, #20
 432              		.cfi_def_cfa_offset 24
 205:Core/Src/main.c **** 
 433              		.loc 1 205 3 view .LVU101
 205:Core/Src/main.c **** 
 434              		.loc 1 205 26 is_stmt 0 view .LVU102
 435 0004 0C22     		movs	r2, #12
 436 0006 0021     		movs	r1, #0
 437 0008 01A8     		add	r0, sp, #4
 438 000a FFF7FEFF 		bl	memset
 439              	.LVL22:
 213:Core/Src/main.c ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 440              		.loc 1 213 3 is_stmt 1 view .LVU103
 213:Core/Src/main.c ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 441              		.loc 1 213 17 is_stmt 0 view .LVU104
 442 000e 1648     		ldr	r0, .L23
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 19


 443 0010 164B     		ldr	r3, .L23+4
 444 0012 0360     		str	r3, [r0]
 214:Core/Src/main.c ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 445              		.loc 1 214 3 is_stmt 1 view .LVU105
 214:Core/Src/main.c ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 446              		.loc 1 214 28 is_stmt 0 view .LVU106
 447 0014 0023     		movs	r3, #0
 448 0016 4360     		str	r3, [r0, #4]
 215:Core/Src/main.c ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 449              		.loc 1 215 3 is_stmt 1 view .LVU107
 215:Core/Src/main.c ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 450              		.loc 1 215 24 is_stmt 0 view .LVU108
 451 0018 8360     		str	r3, [r0, #8]
 216:Core/Src/main.c ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 452              		.loc 1 216 3 is_stmt 1 view .LVU109
 216:Core/Src/main.c ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 453              		.loc 1 216 23 is_stmt 0 view .LVU110
 454 001a C360     		str	r3, [r0, #12]
 217:Core/Src/main.c ****   hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 455              		.loc 1 217 3 is_stmt 1 view .LVU111
 217:Core/Src/main.c ****   hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 456              		.loc 1 217 26 is_stmt 0 view .LVU112
 457 001c 0122     		movs	r2, #1
 458 001e 0261     		str	r2, [r0, #16]
 218:Core/Src/main.c ****   hadc.Init.LowPowerAutoWait = DISABLE;
 459              		.loc 1 218 3 is_stmt 1 view .LVU113
 218:Core/Src/main.c ****   hadc.Init.LowPowerAutoWait = DISABLE;
 460              		.loc 1 218 26 is_stmt 0 view .LVU114
 461 0020 0421     		movs	r1, #4
 462 0022 4161     		str	r1, [r0, #20]
 219:Core/Src/main.c ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 463              		.loc 1 219 3 is_stmt 1 view .LVU115
 219:Core/Src/main.c ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 464              		.loc 1 219 30 is_stmt 0 view .LVU116
 465 0024 0376     		strb	r3, [r0, #24]
 220:Core/Src/main.c ****   hadc.Init.ContinuousConvMode = ENABLE;
 466              		.loc 1 220 3 is_stmt 1 view .LVU117
 220:Core/Src/main.c ****   hadc.Init.ContinuousConvMode = ENABLE;
 467              		.loc 1 220 34 is_stmt 0 view .LVU118
 468 0026 4376     		strb	r3, [r0, #25]
 221:Core/Src/main.c ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 469              		.loc 1 221 3 is_stmt 1 view .LVU119
 221:Core/Src/main.c ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 470              		.loc 1 221 32 is_stmt 0 view .LVU120
 471 0028 8276     		strb	r2, [r0, #26]
 222:Core/Src/main.c ****   hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 472              		.loc 1 222 3 is_stmt 1 view .LVU121
 222:Core/Src/main.c ****   hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 473              		.loc 1 222 35 is_stmt 0 view .LVU122
 474 002a C376     		strb	r3, [r0, #27]
 223:Core/Src/main.c ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 475              		.loc 1 223 3 is_stmt 1 view .LVU123
 223:Core/Src/main.c ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 476              		.loc 1 223 30 is_stmt 0 view .LVU124
 477 002c C221     		movs	r1, #194
 478 002e FF31     		adds	r1, r1, #255
 479 0030 C161     		str	r1, [r0, #28]
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 20


 224:Core/Src/main.c ****   hadc.Init.DMAContinuousRequests = ENABLE;
 480              		.loc 1 224 3 is_stmt 1 view .LVU125
 224:Core/Src/main.c ****   hadc.Init.DMAContinuousRequests = ENABLE;
 481              		.loc 1 224 34 is_stmt 0 view .LVU126
 482 0032 0362     		str	r3, [r0, #32]
 225:Core/Src/main.c ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 483              		.loc 1 225 3 is_stmt 1 view .LVU127
 225:Core/Src/main.c ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 484              		.loc 1 225 35 is_stmt 0 view .LVU128
 485 0034 2433     		adds	r3, r3, #36
 486 0036 C254     		strb	r2, [r0, r3]
 226:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
 487              		.loc 1 226 3 is_stmt 1 view .LVU129
 226:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
 488              		.loc 1 226 21 is_stmt 0 view .LVU130
 489 0038 8262     		str	r2, [r0, #40]
 227:Core/Src/main.c ****   {
 490              		.loc 1 227 3 is_stmt 1 view .LVU131
 227:Core/Src/main.c ****   {
 491              		.loc 1 227 7 is_stmt 0 view .LVU132
 492 003a FFF7FEFF 		bl	HAL_ADC_Init
 493              	.LVL23:
 227:Core/Src/main.c ****   {
 494              		.loc 1 227 6 discriminator 1 view .LVU133
 495 003e 0028     		cmp	r0, #0
 496 0040 0ED1     		bne	.L21
 234:Core/Src/main.c ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 497              		.loc 1 234 3 is_stmt 1 view .LVU134
 234:Core/Src/main.c ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 498              		.loc 1 234 19 is_stmt 0 view .LVU135
 499 0042 0023     		movs	r3, #0
 500 0044 0193     		str	r3, [sp, #4]
 235:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 501              		.loc 1 235 3 is_stmt 1 view .LVU136
 235:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 502              		.loc 1 235 16 is_stmt 0 view .LVU137
 503 0046 8023     		movs	r3, #128
 504 0048 5B01     		lsls	r3, r3, #5
 505 004a 0293     		str	r3, [sp, #8]
 236:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 506              		.loc 1 236 3 is_stmt 1 view .LVU138
 236:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 507              		.loc 1 236 24 is_stmt 0 view .LVU139
 508 004c 0523     		movs	r3, #5
 509 004e 0393     		str	r3, [sp, #12]
 237:Core/Src/main.c ****   {
 510              		.loc 1 237 3 is_stmt 1 view .LVU140
 237:Core/Src/main.c ****   {
 511              		.loc 1 237 7 is_stmt 0 view .LVU141
 512 0050 0548     		ldr	r0, .L23
 513 0052 01A9     		add	r1, sp, #4
 514 0054 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 515              	.LVL24:
 237:Core/Src/main.c ****   {
 516              		.loc 1 237 6 discriminator 1 view .LVU142
 517 0058 0028     		cmp	r0, #0
 518 005a 03D1     		bne	.L22
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 21


 245:Core/Src/main.c **** 
 519              		.loc 1 245 1 view .LVU143
 520 005c 05B0     		add	sp, sp, #20
 521              		@ sp needed
 522 005e 00BD     		pop	{pc}
 523              	.L21:
 229:Core/Src/main.c ****   }
 524              		.loc 1 229 5 is_stmt 1 view .LVU144
 525 0060 FFF7FEFF 		bl	Error_Handler
 526              	.LVL25:
 527              	.L22:
 239:Core/Src/main.c ****   }
 528              		.loc 1 239 5 view .LVU145
 529 0064 FFF7FEFF 		bl	Error_Handler
 530              	.LVL26:
 531              	.L24:
 532              		.align	2
 533              	.L23:
 534 0068 00000000 		.word	hadc
 535 006c 00240140 		.word	1073816576
 536              		.cfi_endproc
 537              	.LFE42:
 539              		.section	.text.MX_TIM1_Init,"ax",%progbits
 540              		.align	1
 541              		.syntax unified
 542              		.code	16
 543              		.thumb_func
 545              	MX_TIM1_Init:
 546              	.LFB43:
 253:Core/Src/main.c **** 
 547              		.loc 1 253 1 view -0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 88
 550              		@ frame_needed = 0, uses_anonymous_args = 0
 551 0000 00B5     		push	{lr}
 552              		.cfi_def_cfa_offset 4
 553              		.cfi_offset 14, -4
 554 0002 97B0     		sub	sp, sp, #92
 555              		.cfi_def_cfa_offset 96
 259:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 556              		.loc 1 259 3 view .LVU147
 259:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 557              		.loc 1 259 26 is_stmt 0 view .LVU148
 558 0004 1022     		movs	r2, #16
 559 0006 0021     		movs	r1, #0
 560 0008 12A8     		add	r0, sp, #72
 561 000a FFF7FEFF 		bl	memset
 562              	.LVL27:
 260:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 563              		.loc 1 260 3 is_stmt 1 view .LVU149
 260:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 564              		.loc 1 260 27 is_stmt 0 view .LVU150
 565 000e 0822     		movs	r2, #8
 566 0010 0021     		movs	r1, #0
 567 0012 10A8     		add	r0, sp, #64
 568 0014 FFF7FEFF 		bl	memset
 569              	.LVL28:
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 22


 261:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 570              		.loc 1 261 3 is_stmt 1 view .LVU151
 261:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 571              		.loc 1 261 22 is_stmt 0 view .LVU152
 572 0018 1C22     		movs	r2, #28
 573 001a 0021     		movs	r1, #0
 574 001c 09A8     		add	r0, sp, #36
 575 001e FFF7FEFF 		bl	memset
 576              	.LVL29:
 262:Core/Src/main.c **** 
 577              		.loc 1 262 3 is_stmt 1 view .LVU153
 262:Core/Src/main.c **** 
 578              		.loc 1 262 34 is_stmt 0 view .LVU154
 579 0022 2022     		movs	r2, #32
 580 0024 0021     		movs	r1, #0
 581 0026 01A8     		add	r0, sp, #4
 582 0028 FFF7FEFF 		bl	memset
 583              	.LVL30:
 267:Core/Src/main.c ****   htim1.Init.Prescaler = 5;
 584              		.loc 1 267 3 is_stmt 1 view .LVU155
 267:Core/Src/main.c ****   htim1.Init.Prescaler = 5;
 585              		.loc 1 267 18 is_stmt 0 view .LVU156
 586 002c 3448     		ldr	r0, .L42
 587 002e 354B     		ldr	r3, .L42+4
 588 0030 0360     		str	r3, [r0]
 268:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 589              		.loc 1 268 3 is_stmt 1 view .LVU157
 268:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 590              		.loc 1 268 24 is_stmt 0 view .LVU158
 591 0032 0523     		movs	r3, #5
 592 0034 4360     		str	r3, [r0, #4]
 269:Core/Src/main.c ****   htim1.Init.Period = 255;
 593              		.loc 1 269 3 is_stmt 1 view .LVU159
 269:Core/Src/main.c ****   htim1.Init.Period = 255;
 594              		.loc 1 269 26 is_stmt 0 view .LVU160
 595 0036 0023     		movs	r3, #0
 596 0038 8360     		str	r3, [r0, #8]
 270:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 597              		.loc 1 270 3 is_stmt 1 view .LVU161
 270:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 598              		.loc 1 270 21 is_stmt 0 view .LVU162
 599 003a FF22     		movs	r2, #255
 600 003c C260     		str	r2, [r0, #12]
 271:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 601              		.loc 1 271 3 is_stmt 1 view .LVU163
 271:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 602              		.loc 1 271 28 is_stmt 0 view .LVU164
 603 003e 0361     		str	r3, [r0, #16]
 272:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 604              		.loc 1 272 3 is_stmt 1 view .LVU165
 272:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 605              		.loc 1 272 32 is_stmt 0 view .LVU166
 606 0040 4361     		str	r3, [r0, #20]
 273:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 607              		.loc 1 273 3 is_stmt 1 view .LVU167
 273:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 608              		.loc 1 273 32 is_stmt 0 view .LVU168
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 23


 609 0042 8361     		str	r3, [r0, #24]
 274:Core/Src/main.c ****   {
 610              		.loc 1 274 3 is_stmt 1 view .LVU169
 274:Core/Src/main.c ****   {
 611              		.loc 1 274 7 is_stmt 0 view .LVU170
 612 0044 FFF7FEFF 		bl	HAL_TIM_Base_Init
 613              	.LVL31:
 274:Core/Src/main.c ****   {
 614              		.loc 1 274 6 discriminator 1 view .LVU171
 615 0048 0028     		cmp	r0, #0
 616 004a 49D1     		bne	.L34
 278:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 617              		.loc 1 278 3 is_stmt 1 view .LVU172
 278:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 618              		.loc 1 278 34 is_stmt 0 view .LVU173
 619 004c 8023     		movs	r3, #128
 620 004e 5B01     		lsls	r3, r3, #5
 621 0050 1293     		str	r3, [sp, #72]
 279:Core/Src/main.c ****   {
 622              		.loc 1 279 3 is_stmt 1 view .LVU174
 279:Core/Src/main.c ****   {
 623              		.loc 1 279 7 is_stmt 0 view .LVU175
 624 0052 2B48     		ldr	r0, .L42
 625 0054 12A9     		add	r1, sp, #72
 626 0056 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 627              	.LVL32:
 279:Core/Src/main.c ****   {
 628              		.loc 1 279 6 discriminator 1 view .LVU176
 629 005a 0028     		cmp	r0, #0
 630 005c 42D1     		bne	.L35
 283:Core/Src/main.c ****   {
 631              		.loc 1 283 3 is_stmt 1 view .LVU177
 283:Core/Src/main.c ****   {
 632              		.loc 1 283 7 is_stmt 0 view .LVU178
 633 005e 2848     		ldr	r0, .L42
 634 0060 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 635              	.LVL33:
 283:Core/Src/main.c ****   {
 636              		.loc 1 283 6 discriminator 1 view .LVU179
 637 0064 0028     		cmp	r0, #0
 638 0066 3FD1     		bne	.L36
 287:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 639              		.loc 1 287 3 is_stmt 1 view .LVU180
 287:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 640              		.loc 1 287 37 is_stmt 0 view .LVU181
 641 0068 0023     		movs	r3, #0
 642 006a 1093     		str	r3, [sp, #64]
 288:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 643              		.loc 1 288 3 is_stmt 1 view .LVU182
 288:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 644              		.loc 1 288 33 is_stmt 0 view .LVU183
 645 006c 1193     		str	r3, [sp, #68]
 289:Core/Src/main.c ****   {
 646              		.loc 1 289 3 is_stmt 1 view .LVU184
 289:Core/Src/main.c ****   {
 647              		.loc 1 289 7 is_stmt 0 view .LVU185
 648 006e 2448     		ldr	r0, .L42
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 24


 649 0070 10A9     		add	r1, sp, #64
 650 0072 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 651              	.LVL34:
 289:Core/Src/main.c ****   {
 652              		.loc 1 289 6 discriminator 1 view .LVU186
 653 0076 0028     		cmp	r0, #0
 654 0078 38D1     		bne	.L37
 293:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 655              		.loc 1 293 3 is_stmt 1 view .LVU187
 293:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 656              		.loc 1 293 20 is_stmt 0 view .LVU188
 657 007a 6023     		movs	r3, #96
 658 007c 0993     		str	r3, [sp, #36]
 294:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 659              		.loc 1 294 3 is_stmt 1 view .LVU189
 294:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 660              		.loc 1 294 19 is_stmt 0 view .LVU190
 661 007e 0023     		movs	r3, #0
 662 0080 0A93     		str	r3, [sp, #40]
 295:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 663              		.loc 1 295 3 is_stmt 1 view .LVU191
 295:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 664              		.loc 1 295 24 is_stmt 0 view .LVU192
 665 0082 0B93     		str	r3, [sp, #44]
 296:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 666              		.loc 1 296 3 is_stmt 1 view .LVU193
 296:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 667              		.loc 1 296 25 is_stmt 0 view .LVU194
 668 0084 0C93     		str	r3, [sp, #48]
 297:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 669              		.loc 1 297 3 is_stmt 1 view .LVU195
 297:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 670              		.loc 1 297 24 is_stmt 0 view .LVU196
 671 0086 0D93     		str	r3, [sp, #52]
 298:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 672              		.loc 1 298 3 is_stmt 1 view .LVU197
 298:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 673              		.loc 1 298 25 is_stmt 0 view .LVU198
 674 0088 0E93     		str	r3, [sp, #56]
 299:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 675              		.loc 1 299 3 is_stmt 1 view .LVU199
 299:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 676              		.loc 1 299 26 is_stmt 0 view .LVU200
 677 008a 0F93     		str	r3, [sp, #60]
 300:Core/Src/main.c ****   {
 678              		.loc 1 300 3 is_stmt 1 view .LVU201
 300:Core/Src/main.c ****   {
 679              		.loc 1 300 7 is_stmt 0 view .LVU202
 680 008c 1C48     		ldr	r0, .L42
 681 008e 0022     		movs	r2, #0
 682 0090 09A9     		add	r1, sp, #36
 683 0092 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 684              	.LVL35:
 300:Core/Src/main.c ****   {
 685              		.loc 1 300 6 discriminator 1 view .LVU203
 686 0096 0028     		cmp	r0, #0
 687 0098 2AD1     		bne	.L38
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 25


 304:Core/Src/main.c ****   {
 688              		.loc 1 304 3 is_stmt 1 view .LVU204
 304:Core/Src/main.c ****   {
 689              		.loc 1 304 7 is_stmt 0 view .LVU205
 690 009a 1948     		ldr	r0, .L42
 691 009c 0422     		movs	r2, #4
 692 009e 09A9     		add	r1, sp, #36
 693 00a0 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 694              	.LVL36:
 304:Core/Src/main.c ****   {
 695              		.loc 1 304 6 discriminator 1 view .LVU206
 696 00a4 0028     		cmp	r0, #0
 697 00a6 25D1     		bne	.L39
 308:Core/Src/main.c ****   {
 698              		.loc 1 308 3 is_stmt 1 view .LVU207
 308:Core/Src/main.c ****   {
 699              		.loc 1 308 7 is_stmt 0 view .LVU208
 700 00a8 1548     		ldr	r0, .L42
 701 00aa 0822     		movs	r2, #8
 702 00ac 09A9     		add	r1, sp, #36
 703 00ae FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 704              	.LVL37:
 308:Core/Src/main.c ****   {
 705              		.loc 1 308 6 discriminator 1 view .LVU209
 706 00b2 0028     		cmp	r0, #0
 707 00b4 20D1     		bne	.L40
 312:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 708              		.loc 1 312 3 is_stmt 1 view .LVU210
 312:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 709              		.loc 1 312 40 is_stmt 0 view .LVU211
 710 00b6 0023     		movs	r3, #0
 711 00b8 0193     		str	r3, [sp, #4]
 313:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 712              		.loc 1 313 3 is_stmt 1 view .LVU212
 313:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 713              		.loc 1 313 41 is_stmt 0 view .LVU213
 714 00ba 0293     		str	r3, [sp, #8]
 314:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 715              		.loc 1 314 3 is_stmt 1 view .LVU214
 314:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 716              		.loc 1 314 34 is_stmt 0 view .LVU215
 717 00bc 0393     		str	r3, [sp, #12]
 315:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 718              		.loc 1 315 3 is_stmt 1 view .LVU216
 315:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 719              		.loc 1 315 33 is_stmt 0 view .LVU217
 720 00be 0493     		str	r3, [sp, #16]
 316:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 721              		.loc 1 316 3 is_stmt 1 view .LVU218
 316:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 722              		.loc 1 316 35 is_stmt 0 view .LVU219
 723 00c0 0593     		str	r3, [sp, #20]
 317:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 724              		.loc 1 317 3 is_stmt 1 view .LVU220
 317:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 725              		.loc 1 317 38 is_stmt 0 view .LVU221
 726 00c2 8022     		movs	r2, #128
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 26


 727 00c4 9201     		lsls	r2, r2, #6
 728 00c6 0692     		str	r2, [sp, #24]
 318:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 729              		.loc 1 318 3 is_stmt 1 view .LVU222
 318:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 730              		.loc 1 318 40 is_stmt 0 view .LVU223
 731 00c8 0893     		str	r3, [sp, #32]
 319:Core/Src/main.c ****   {
 732              		.loc 1 319 3 is_stmt 1 view .LVU224
 319:Core/Src/main.c ****   {
 733              		.loc 1 319 7 is_stmt 0 view .LVU225
 734 00ca 0D48     		ldr	r0, .L42
 735 00cc 01A9     		add	r1, sp, #4
 736 00ce FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 737              	.LVL38:
 319:Core/Src/main.c ****   {
 738              		.loc 1 319 6 discriminator 1 view .LVU226
 739 00d2 0028     		cmp	r0, #0
 740 00d4 12D1     		bne	.L41
 326:Core/Src/main.c **** 
 741              		.loc 1 326 3 is_stmt 1 view .LVU227
 742 00d6 0A48     		ldr	r0, .L42
 743 00d8 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 744              	.LVL39:
 328:Core/Src/main.c **** 
 745              		.loc 1 328 1 is_stmt 0 view .LVU228
 746 00dc 17B0     		add	sp, sp, #92
 747              		@ sp needed
 748 00de 00BD     		pop	{pc}
 749              	.L34:
 276:Core/Src/main.c ****   }
 750              		.loc 1 276 5 is_stmt 1 view .LVU229
 751 00e0 FFF7FEFF 		bl	Error_Handler
 752              	.LVL40:
 753              	.L35:
 281:Core/Src/main.c ****   }
 754              		.loc 1 281 5 view .LVU230
 755 00e4 FFF7FEFF 		bl	Error_Handler
 756              	.LVL41:
 757              	.L36:
 285:Core/Src/main.c ****   }
 758              		.loc 1 285 5 view .LVU231
 759 00e8 FFF7FEFF 		bl	Error_Handler
 760              	.LVL42:
 761              	.L37:
 291:Core/Src/main.c ****   }
 762              		.loc 1 291 5 view .LVU232
 763 00ec FFF7FEFF 		bl	Error_Handler
 764              	.LVL43:
 765              	.L38:
 302:Core/Src/main.c ****   }
 766              		.loc 1 302 5 view .LVU233
 767 00f0 FFF7FEFF 		bl	Error_Handler
 768              	.LVL44:
 769              	.L39:
 306:Core/Src/main.c ****   }
 770              		.loc 1 306 5 view .LVU234
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 27


 771 00f4 FFF7FEFF 		bl	Error_Handler
 772              	.LVL45:
 773              	.L40:
 310:Core/Src/main.c ****   }
 774              		.loc 1 310 5 view .LVU235
 775 00f8 FFF7FEFF 		bl	Error_Handler
 776              	.LVL46:
 777              	.L41:
 321:Core/Src/main.c ****   }
 778              		.loc 1 321 5 view .LVU236
 779 00fc FFF7FEFF 		bl	Error_Handler
 780              	.LVL47:
 781              	.L43:
 782              		.align	2
 783              	.L42:
 784 0100 00000000 		.word	htim1
 785 0104 002C0140 		.word	1073818624
 786              		.cfi_endproc
 787              	.LFE43:
 789              		.section	.text.SystemClock_Config,"ax",%progbits
 790              		.align	1
 791              		.global	SystemClock_Config
 792              		.syntax unified
 793              		.code	16
 794              		.thumb_func
 796              	SystemClock_Config:
 797              	.LFB41:
 159:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 798              		.loc 1 159 1 view -0
 799              		.cfi_startproc
 800              		@ args = 0, pretend = 0, frame = 72
 801              		@ frame_needed = 0, uses_anonymous_args = 0
 802 0000 00B5     		push	{lr}
 803              		.cfi_def_cfa_offset 4
 804              		.cfi_offset 14, -4
 805 0002 93B0     		sub	sp, sp, #76
 806              		.cfi_def_cfa_offset 80
 160:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 807              		.loc 1 160 3 view .LVU238
 160:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 808              		.loc 1 160 22 is_stmt 0 view .LVU239
 809 0004 3422     		movs	r2, #52
 810 0006 0021     		movs	r1, #0
 811 0008 05A8     		add	r0, sp, #20
 812 000a FFF7FEFF 		bl	memset
 813              	.LVL48:
 161:Core/Src/main.c **** 
 814              		.loc 1 161 3 is_stmt 1 view .LVU240
 161:Core/Src/main.c **** 
 815              		.loc 1 161 22 is_stmt 0 view .LVU241
 816 000e 1022     		movs	r2, #16
 817 0010 0021     		movs	r1, #0
 818 0012 01A8     		add	r0, sp, #4
 819 0014 FFF7FEFF 		bl	memset
 820              	.LVL49:
 166:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 821              		.loc 1 166 3 is_stmt 1 view .LVU242
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 28


 166:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 822              		.loc 1 166 36 is_stmt 0 view .LVU243
 823 0018 1123     		movs	r3, #17
 824 001a 0593     		str	r3, [sp, #20]
 167:Core/Src/main.c ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 825              		.loc 1 167 3 is_stmt 1 view .LVU244
 167:Core/Src/main.c ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 826              		.loc 1 167 30 is_stmt 0 view .LVU245
 827 001c 103B     		subs	r3, r3, #16
 828 001e 0693     		str	r3, [sp, #24]
 168:Core/Src/main.c ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 829              		.loc 1 168 3 is_stmt 1 view .LVU246
 168:Core/Src/main.c ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 830              		.loc 1 168 32 is_stmt 0 view .LVU247
 831 0020 0A93     		str	r3, [sp, #40]
 169:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 832              		.loc 1 169 3 is_stmt 1 view .LVU248
 169:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 833              		.loc 1 169 43 is_stmt 0 view .LVU249
 834 0022 0F33     		adds	r3, r3, #15
 835 0024 0B93     		str	r3, [sp, #44]
 170:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 836              		.loc 1 170 3 is_stmt 1 view .LVU250
 170:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 837              		.loc 1 170 34 is_stmt 0 view .LVU251
 838 0026 0E3B     		subs	r3, r3, #14
 839 0028 0E93     		str	r3, [sp, #56]
 171:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 840              		.loc 1 171 3 is_stmt 1 view .LVU252
 171:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 841              		.loc 1 171 35 is_stmt 0 view .LVU253
 842 002a 8023     		movs	r3, #128
 843 002c 5B02     		lsls	r3, r3, #9
 844 002e 0F93     		str	r3, [sp, #60]
 172:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 845              		.loc 1 172 3 is_stmt 1 view .LVU254
 172:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 846              		.loc 1 172 32 is_stmt 0 view .LVU255
 847 0030 8023     		movs	r3, #128
 848 0032 5B03     		lsls	r3, r3, #13
 849 0034 1093     		str	r3, [sp, #64]
 173:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 850              		.loc 1 173 3 is_stmt 1 view .LVU256
 174:Core/Src/main.c ****   {
 851              		.loc 1 174 3 view .LVU257
 174:Core/Src/main.c ****   {
 852              		.loc 1 174 7 is_stmt 0 view .LVU258
 853 0036 05A8     		add	r0, sp, #20
 854 0038 FFF7FEFF 		bl	HAL_RCC_OscConfig
 855              	.LVL50:
 174:Core/Src/main.c ****   {
 856              		.loc 1 174 6 discriminator 1 view .LVU259
 857 003c 0028     		cmp	r0, #0
 858 003e 0ED1     		bne	.L47
 181:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 859              		.loc 1 181 3 is_stmt 1 view .LVU260
 181:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 29


 860              		.loc 1 181 31 is_stmt 0 view .LVU261
 861 0040 0723     		movs	r3, #7
 862 0042 0193     		str	r3, [sp, #4]
 183:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 863              		.loc 1 183 3 is_stmt 1 view .LVU262
 183:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 864              		.loc 1 183 34 is_stmt 0 view .LVU263
 865 0044 053B     		subs	r3, r3, #5
 866 0046 0293     		str	r3, [sp, #8]
 184:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 867              		.loc 1 184 3 is_stmt 1 view .LVU264
 184:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 868              		.loc 1 184 35 is_stmt 0 view .LVU265
 869 0048 0023     		movs	r3, #0
 870 004a 0393     		str	r3, [sp, #12]
 185:Core/Src/main.c **** 
 871              		.loc 1 185 3 is_stmt 1 view .LVU266
 185:Core/Src/main.c **** 
 872              		.loc 1 185 36 is_stmt 0 view .LVU267
 873 004c 0493     		str	r3, [sp, #16]
 187:Core/Src/main.c ****   {
 874              		.loc 1 187 3 is_stmt 1 view .LVU268
 187:Core/Src/main.c ****   {
 875              		.loc 1 187 7 is_stmt 0 view .LVU269
 876 004e 0121     		movs	r1, #1
 877 0050 01A8     		add	r0, sp, #4
 878 0052 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 879              	.LVL51:
 187:Core/Src/main.c ****   {
 880              		.loc 1 187 6 discriminator 1 view .LVU270
 881 0056 0028     		cmp	r0, #0
 882 0058 03D1     		bne	.L48
 191:Core/Src/main.c **** 
 883              		.loc 1 191 1 view .LVU271
 884 005a 13B0     		add	sp, sp, #76
 885              		@ sp needed
 886 005c 00BD     		pop	{pc}
 887              	.L47:
 176:Core/Src/main.c ****   }
 888              		.loc 1 176 5 is_stmt 1 view .LVU272
 889 005e FFF7FEFF 		bl	Error_Handler
 890              	.LVL52:
 891              	.L48:
 189:Core/Src/main.c ****   }
 892              		.loc 1 189 5 view .LVU273
 893 0062 FFF7FEFF 		bl	Error_Handler
 894              	.LVL53:
 895              		.cfi_endproc
 896              	.LFE41:
 898              		.global	__aeabi_uidiv
 899              		.section	.text.main,"ax",%progbits
 900              		.align	1
 901              		.global	main
 902              		.syntax unified
 903              		.code	16
 904              		.thumb_func
 906              	main:
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 30


 907              	.LFB40:
  76:Core/Src/main.c **** 
 908              		.loc 1 76 1 view -0
 909              		.cfi_startproc
 910              		@ Volatile: function does not return.
 911              		@ args = 0, pretend = 0, frame = 0
 912              		@ frame_needed = 0, uses_anonymous_args = 0
 913 0000 70B5     		push	{r4, r5, r6, lr}
 914              		.cfi_def_cfa_offset 16
 915              		.cfi_offset 4, -16
 916              		.cfi_offset 5, -12
 917              		.cfi_offset 6, -8
 918              		.cfi_offset 14, -4
  85:Core/Src/main.c **** 
 919              		.loc 1 85 3 view .LVU275
 920 0002 FFF7FEFF 		bl	HAL_Init
 921              	.LVL54:
  92:Core/Src/main.c **** 
 922              		.loc 1 92 3 view .LVU276
 923 0006 FFF7FEFF 		bl	SystemClock_Config
 924              	.LVL55:
  99:Core/Src/main.c ****   MX_DMA_Init();
 925              		.loc 1 99 3 view .LVU277
 926 000a FFF7FEFF 		bl	MX_GPIO_Init
 927              	.LVL56:
 100:Core/Src/main.c ****   MX_ADC_Init();
 928              		.loc 1 100 3 view .LVU278
 929 000e FFF7FEFF 		bl	MX_DMA_Init
 930              	.LVL57:
 101:Core/Src/main.c ****   MX_TIM1_Init();
 931              		.loc 1 101 3 view .LVU279
 932 0012 FFF7FEFF 		bl	MX_ADC_Init
 933              	.LVL58:
 102:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 934              		.loc 1 102 3 view .LVU280
 935 0016 FFF7FEFF 		bl	MX_TIM1_Init
 936              	.LVL59:
 104:Core/Src/main.c ****   HAL_Delay(200);
 937              		.loc 1 104 3 view .LVU281
 938 001a 8025     		movs	r5, #128
 939 001c AD01     		lsls	r5, r5, #6
 940 001e 5A4C     		ldr	r4, .L63
 941 0020 2900     		movs	r1, r5
 942 0022 2000     		movs	r0, r4
 943 0024 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 944              	.LVL60:
 105:Core/Src/main.c ****   HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 945              		.loc 1 105 3 view .LVU282
 946 0028 C820     		movs	r0, #200
 947 002a FFF7FEFF 		bl	HAL_Delay
 948              	.LVL61:
 106:Core/Src/main.c **** 
 949              		.loc 1 106 3 view .LVU283
 950 002e 2900     		movs	r1, r5
 951 0030 2000     		movs	r0, r4
 952 0032 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 953              	.LVL62:
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 31


 108:Core/Src/main.c **** 
 954              		.loc 1 108 3 view .LVU284
 955 0036 5549     		ldr	r1, .L63+4
 956 0038 5548     		ldr	r0, .L63+8
 957 003a 0122     		movs	r2, #1
 958 003c FFF7FEFF 		bl	HAL_ADC_Start_DMA
 959              	.LVL63:
 110:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 960              		.loc 1 110 3 view .LVU285
 961 0040 544C     		ldr	r4, .L63+12
 962 0042 0021     		movs	r1, #0
 963 0044 2000     		movs	r0, r4
 964 0046 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 965              	.LVL64:
 111:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 966              		.loc 1 111 3 view .LVU286
 967 004a 0421     		movs	r1, #4
 968 004c 2000     		movs	r0, r4
 969 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 970              	.LVL65:
 112:Core/Src/main.c **** 
 971              		.loc 1 112 3 view .LVU287
 972 0052 0821     		movs	r1, #8
 973 0054 2000     		movs	r0, r4
 974 0056 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 975              	.LVL66:
 114:Core/Src/main.c ****   HAL_Delay(100);
 976              		.loc 1 114 3 view .LVU288
 977 005a 0124     		movs	r4, #1
 978 005c 6442     		rsbs	r4, r4, #0
 979 005e 0122     		movs	r2, #1
 980 0060 0021     		movs	r1, #0
 981 0062 2000     		movs	r0, r4
 982 0064 FFF7FEFF 		bl	setPhases
 983              	.LVL67:
 115:Core/Src/main.c ****   setPhases(PH_Z, PH_Z, PH_Z);
 984              		.loc 1 115 3 view .LVU289
 985 0068 6420     		movs	r0, #100
 986 006a FFF7FEFF 		bl	HAL_Delay
 987              	.LVL68:
 116:Core/Src/main.c ****   /* USER CODE END 2 */
 988              		.loc 1 116 3 view .LVU290
 989 006e 2200     		movs	r2, r4
 990 0070 2100     		movs	r1, r4
 991 0072 2000     		movs	r0, r4
 992 0074 FFF7FEFF 		bl	setPhases
 993              	.LVL69:
 994 0078 30E0     		b	.L57
 995              	.L50:
 132:Core/Src/main.c ****       setPhases(PH_H, PH_L, PH_Z);
 996              		.loc 1 132 11 view .LVU291
 132:Core/Src/main.c ****       setPhases(PH_H, PH_L, PH_Z);
 997              		.loc 1 132 13 is_stmt 0 view .LVU292
 998 007a 002B     		cmp	r3, #0
 999 007c 05D0     		beq	.L52
 132:Core/Src/main.c ****       setPhases(PH_H, PH_L, PH_Z);
 1000              		.loc 1 132 32 discriminator 1 view .LVU293
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 32


 1001 007e 464A     		ldr	r2, .L63+16
 1002 0080 5278     		ldrb	r2, [r2, #1]
 132:Core/Src/main.c ****       setPhases(PH_H, PH_L, PH_Z);
 1003              		.loc 1 132 23 discriminator 1 view .LVU294
 1004 0082 002A     		cmp	r2, #0
 1005 0084 01D1     		bne	.L52
 132:Core/Src/main.c ****       setPhases(PH_H, PH_L, PH_Z);
 1006              		.loc 1 132 36 discriminator 2 view .LVU295
 1007 0086 002D     		cmp	r5, #0
 1008 0088 5CD1     		bne	.L58
 1009              	.L52:
 134:Core/Src/main.c ****       setPhases(PH_H, PH_Z, PH_L);
 1010              		.loc 1 134 11 is_stmt 1 view .LVU296
 134:Core/Src/main.c ****       setPhases(PH_H, PH_Z, PH_L);
 1011              		.loc 1 134 13 is_stmt 0 view .LVU297
 1012 008a 002B     		cmp	r3, #0
 1013 008c 05D0     		beq	.L53
 134:Core/Src/main.c ****       setPhases(PH_H, PH_Z, PH_L);
 1014              		.loc 1 134 32 discriminator 1 view .LVU298
 1015 008e 424A     		ldr	r2, .L63+16
 1016 0090 5278     		ldrb	r2, [r2, #1]
 134:Core/Src/main.c ****       setPhases(PH_H, PH_Z, PH_L);
 1017              		.loc 1 134 23 discriminator 1 view .LVU299
 1018 0092 002A     		cmp	r2, #0
 1019 0094 01D1     		bne	.L53
 134:Core/Src/main.c ****       setPhases(PH_H, PH_Z, PH_L);
 1020              		.loc 1 134 36 discriminator 2 view .LVU300
 1021 0096 002D     		cmp	r5, #0
 1022 0098 5BD0     		beq	.L59
 1023              	.L53:
 136:Core/Src/main.c ****       setPhases(PH_Z, PH_H, PH_L);
 1024              		.loc 1 136 11 is_stmt 1 view .LVU301
 136:Core/Src/main.c ****       setPhases(PH_Z, PH_H, PH_L);
 1025              		.loc 1 136 13 is_stmt 0 view .LVU302
 1026 009a 002B     		cmp	r3, #0
 1027 009c 05D0     		beq	.L54
 136:Core/Src/main.c ****       setPhases(PH_Z, PH_H, PH_L);
 1028              		.loc 1 136 31 discriminator 1 view .LVU303
 1029 009e 3E4A     		ldr	r2, .L63+16
 1030 00a0 5278     		ldrb	r2, [r2, #1]
 136:Core/Src/main.c ****       setPhases(PH_Z, PH_H, PH_L);
 1031              		.loc 1 136 23 discriminator 1 view .LVU304
 1032 00a2 002A     		cmp	r2, #0
 1033 00a4 01D0     		beq	.L54
 136:Core/Src/main.c ****       setPhases(PH_Z, PH_H, PH_L);
 1034              		.loc 1 136 35 discriminator 2 view .LVU305
 1035 00a6 002D     		cmp	r5, #0
 1036 00a8 59D0     		beq	.L60
 1037              	.L54:
 138:Core/Src/main.c ****       setPhases(PH_L, PH_H, PH_Z);
 1038              		.loc 1 138 11 is_stmt 1 view .LVU306
 138:Core/Src/main.c ****       setPhases(PH_L, PH_H, PH_Z);
 1039              		.loc 1 138 13 is_stmt 0 view .LVU307
 1040 00aa 002B     		cmp	r3, #0
 1041 00ac 05D1     		bne	.L55
 138:Core/Src/main.c ****       setPhases(PH_L, PH_H, PH_Z);
 1042              		.loc 1 138 32 discriminator 1 view .LVU308
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 33


 1043 00ae 3A4A     		ldr	r2, .L63+16
 1044 00b0 5278     		ldrb	r2, [r2, #1]
 138:Core/Src/main.c ****       setPhases(PH_L, PH_H, PH_Z);
 1045              		.loc 1 138 24 discriminator 1 view .LVU309
 1046 00b2 002A     		cmp	r2, #0
 1047 00b4 01D0     		beq	.L55
 138:Core/Src/main.c ****       setPhases(PH_L, PH_H, PH_Z);
 1048              		.loc 1 138 36 discriminator 2 view .LVU310
 1049 00b6 002D     		cmp	r5, #0
 1050 00b8 58D0     		beq	.L61
 1051              	.L55:
 140:Core/Src/main.c ****       setPhases(PH_L, PH_Z, PH_H);
 1052              		.loc 1 140 11 is_stmt 1 view .LVU311
 140:Core/Src/main.c ****       setPhases(PH_L, PH_Z, PH_H);
 1053              		.loc 1 140 13 is_stmt 0 view .LVU312
 1054 00ba 002B     		cmp	r3, #0
 1055 00bc 05D1     		bne	.L56
 140:Core/Src/main.c ****       setPhases(PH_L, PH_Z, PH_H);
 1056              		.loc 1 140 32 discriminator 1 view .LVU313
 1057 00be 364B     		ldr	r3, .L63+16
 1058 00c0 5B78     		ldrb	r3, [r3, #1]
 140:Core/Src/main.c ****       setPhases(PH_L, PH_Z, PH_H);
 1059              		.loc 1 140 24 discriminator 1 view .LVU314
 1060 00c2 002B     		cmp	r3, #0
 1061 00c4 01D0     		beq	.L56
 140:Core/Src/main.c ****       setPhases(PH_L, PH_Z, PH_H);
 1062              		.loc 1 140 36 discriminator 2 view .LVU315
 1063 00c6 002D     		cmp	r5, #0
 1064 00c8 57D1     		bne	.L62
 1065              	.L56:
 143:Core/Src/main.c ****     }     
 1066              		.loc 1 143 7 is_stmt 1 view .LVU316
 1067 00ca 0120     		movs	r0, #1
 1068 00cc 4042     		rsbs	r0, r0, #0
 1069 00ce 0200     		movs	r2, r0
 1070 00d0 0100     		movs	r1, r0
 1071 00d2 FFF7FEFF 		bl	setPhases
 1072              	.LVL70:
 1073              	.L51:
 146:Core/Src/main.c ****     /* USER CODE END WHILE */
 1074              		.loc 1 146 5 view .LVU317
 1075 00d6 2E48     		ldr	r0, .L63+8
 1076 00d8 FFF7FEFF 		bl	HAL_ADC_Start
 1077              	.LVL71:
 121:Core/Src/main.c ****   {   
 1078              		.loc 1 121 9 view .LVU318
 1079              	.L57:
 121:Core/Src/main.c ****   {   
 1080              		.loc 1 121 3 view .LVU319
 123:Core/Src/main.c ****     halls[1] = HAL_GPIO_ReadPin(H2_GPIO_Port, H2_Pin);
 1081              		.loc 1 123 5 view .LVU320
 123:Core/Src/main.c ****     halls[1] = HAL_GPIO_ReadPin(H2_GPIO_Port, H2_Pin);
 1082              		.loc 1 123 16 is_stmt 0 view .LVU321
 1083 00dc 8021     		movs	r1, #128
 1084 00de 2F4D     		ldr	r5, .L63+20
 1085 00e0 8901     		lsls	r1, r1, #6
 1086 00e2 2800     		movs	r0, r5
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 34


 1087 00e4 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1088              	.LVL72:
 123:Core/Src/main.c ****     halls[1] = HAL_GPIO_ReadPin(H2_GPIO_Port, H2_Pin);
 1089              		.loc 1 123 16 discriminator 1 view .LVU322
 1090 00e8 431E     		subs	r3, r0, #1
 1091 00ea 9841     		sbcs	r0, r0, r3
 123:Core/Src/main.c ****     halls[1] = HAL_GPIO_ReadPin(H2_GPIO_Port, H2_Pin);
 1092              		.loc 1 123 14 discriminator 1 view .LVU323
 1093 00ec 2A4C     		ldr	r4, .L63+16
 1094 00ee 2070     		strb	r0, [r4]
 124:Core/Src/main.c ****     halls[2] = HAL_GPIO_ReadPin(H3_GPIO_Port, H3_Pin); 
 1095              		.loc 1 124 5 is_stmt 1 view .LVU324
 124:Core/Src/main.c ****     halls[2] = HAL_GPIO_ReadPin(H3_GPIO_Port, H3_Pin); 
 1096              		.loc 1 124 16 is_stmt 0 view .LVU325
 1097 00f0 8021     		movs	r1, #128
 1098 00f2 C901     		lsls	r1, r1, #7
 1099 00f4 2800     		movs	r0, r5
 1100 00f6 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1101              	.LVL73:
 124:Core/Src/main.c ****     halls[2] = HAL_GPIO_ReadPin(H3_GPIO_Port, H3_Pin); 
 1102              		.loc 1 124 16 discriminator 1 view .LVU326
 1103 00fa 431E     		subs	r3, r0, #1
 1104 00fc 9841     		sbcs	r0, r0, r3
 124:Core/Src/main.c ****     halls[2] = HAL_GPIO_ReadPin(H3_GPIO_Port, H3_Pin); 
 1105              		.loc 1 124 14 discriminator 1 view .LVU327
 1106 00fe 6070     		strb	r0, [r4, #1]
 125:Core/Src/main.c **** 
 1107              		.loc 1 125 5 is_stmt 1 view .LVU328
 125:Core/Src/main.c **** 
 1108              		.loc 1 125 16 is_stmt 0 view .LVU329
 1109 0100 8021     		movs	r1, #128
 1110 0102 0902     		lsls	r1, r1, #8
 1111 0104 2800     		movs	r0, r5
 1112 0106 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1113              	.LVL74:
 1114 010a 0500     		movs	r5, r0
 125:Core/Src/main.c **** 
 1115              		.loc 1 125 16 discriminator 1 view .LVU330
 1116 010c 431E     		subs	r3, r0, #1
 1117 010e 9841     		sbcs	r0, r0, r3
 125:Core/Src/main.c **** 
 1118              		.loc 1 125 14 discriminator 1 view .LVU331
 1119 0110 A070     		strb	r0, [r4, #2]
 127:Core/Src/main.c **** 
 1120              		.loc 1 127 5 is_stmt 1 view .LVU332
 127:Core/Src/main.c **** 
 1121              		.loc 1 127 23 is_stmt 0 view .LVU333
 1122 0112 1E4B     		ldr	r3, .L63+4
 1123 0114 1B68     		ldr	r3, [r3]
 127:Core/Src/main.c **** 
 1124              		.loc 1 127 28 view .LVU334
 1125 0116 1802     		lsls	r0, r3, #8
 1126 0118 C01A     		subs	r0, r0, r3
 127:Core/Src/main.c **** 
 1127              		.loc 1 127 53 view .LVU335
 1128 011a 2149     		ldr	r1, .L63+24
 1129 011c FFF7FEFF 		bl	__aeabi_uidiv
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 35


 1130              	.LVL75:
 127:Core/Src/main.c **** 
 1131              		.loc 1 127 10 view .LVU336
 1132 0120 204B     		ldr	r3, .L63+28
 1133 0122 1870     		strb	r0, [r3]
 130:Core/Src/main.c ****       setPhases(PH_Z, PH_L, PH_H);
 1134              		.loc 1 130 5 is_stmt 1 view .LVU337
 130:Core/Src/main.c ****       setPhases(PH_Z, PH_L, PH_H);
 1135              		.loc 1 130 14 is_stmt 0 view .LVU338
 1136 0124 2378     		ldrb	r3, [r4]
 130:Core/Src/main.c ****       setPhases(PH_Z, PH_L, PH_H);
 1137              		.loc 1 130 7 view .LVU339
 1138 0126 002B     		cmp	r3, #0
 1139 0128 A7D1     		bne	.L50
 130:Core/Src/main.c ****       setPhases(PH_Z, PH_L, PH_H);
 1140              		.loc 1 130 27 discriminator 1 view .LVU340
 1141 012a 1B4A     		ldr	r2, .L63+16
 1142 012c 5278     		ldrb	r2, [r2, #1]
 130:Core/Src/main.c ****       setPhases(PH_Z, PH_L, PH_H);
 1143              		.loc 1 130 18 discriminator 1 view .LVU341
 1144 012e 002A     		cmp	r2, #0
 1145 0130 A3D1     		bne	.L50
 130:Core/Src/main.c ****       setPhases(PH_Z, PH_L, PH_H);
 1146              		.loc 1 130 31 discriminator 2 view .LVU342
 1147 0132 002D     		cmp	r5, #0
 1148 0134 A1D0     		beq	.L50
 131:Core/Src/main.c ****     }else if(halls[0] && !halls[1] && halls[2]){
 1149              		.loc 1 131 7 is_stmt 1 view .LVU343
 1150 0136 0120     		movs	r0, #1
 1151 0138 0132     		adds	r2, r2, #1
 1152 013a 0021     		movs	r1, #0
 1153 013c 4042     		rsbs	r0, r0, #0
 1154 013e FFF7FEFF 		bl	setPhases
 1155              	.LVL76:
 1156 0142 C8E7     		b	.L51
 1157              	.L58:
 133:Core/Src/main.c ****     }else if(halls[0] && !halls[1] && !halls[2]){
 1158              		.loc 1 133 7 view .LVU344
 1159 0144 0132     		adds	r2, r2, #1
 1160 0146 5242     		rsbs	r2, r2, #0
 1161 0148 0021     		movs	r1, #0
 1162 014a 0120     		movs	r0, #1
 1163 014c FFF7FEFF 		bl	setPhases
 1164              	.LVL77:
 1165 0150 C1E7     		b	.L51
 1166              	.L59:
 135:Core/Src/main.c ****     }else if(halls[0] && halls[1] && !halls[2]){
 1167              		.loc 1 135 7 view .LVU345
 1168 0152 0121     		movs	r1, #1
 1169 0154 4942     		rsbs	r1, r1, #0
 1170 0156 0120     		movs	r0, #1
 1171 0158 FFF7FEFF 		bl	setPhases
 1172              	.LVL78:
 1173 015c BBE7     		b	.L51
 1174              	.L60:
 137:Core/Src/main.c ****     }else if(!halls[0] && halls[1] && !halls[2]){
 1175              		.loc 1 137 7 view .LVU346
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 36


 1176 015e 0120     		movs	r0, #1
 1177 0160 0022     		movs	r2, #0
 1178 0162 0121     		movs	r1, #1
 1179 0164 4042     		rsbs	r0, r0, #0
 1180 0166 FFF7FEFF 		bl	setPhases
 1181              	.LVL79:
 1182 016a B4E7     		b	.L51
 1183              	.L61:
 139:Core/Src/main.c ****     }else if(!halls[0] && halls[1] && halls[2]){
 1184              		.loc 1 139 7 view .LVU347
 1185 016c 0122     		movs	r2, #1
 1186 016e 5242     		rsbs	r2, r2, #0
 1187 0170 0121     		movs	r1, #1
 1188 0172 0020     		movs	r0, #0
 1189 0174 FFF7FEFF 		bl	setPhases
 1190              	.LVL80:
 1191 0178 ADE7     		b	.L51
 1192              	.L62:
 141:Core/Src/main.c ****     }else{ // UNEXPECTED VALUE
 1193              		.loc 1 141 7 view .LVU348
 1194 017a 0121     		movs	r1, #1
 1195 017c 0122     		movs	r2, #1
 1196 017e 4942     		rsbs	r1, r1, #0
 1197 0180 0020     		movs	r0, #0
 1198 0182 FFF7FEFF 		bl	setPhases
 1199              	.LVL81:
 1200 0186 A6E7     		b	.L51
 1201              	.L64:
 1202              		.align	2
 1203              	.L63:
 1204 0188 00080048 		.word	1207961600
 1205 018c 00000000 		.word	value_adc
 1206 0190 00000000 		.word	hadc
 1207 0194 00000000 		.word	htim1
 1208 0198 00000000 		.word	halls
 1209 019c 00040048 		.word	1207960576
 1210 01a0 FF0F0000 		.word	4095
 1211 01a4 00000000 		.word	duty
 1212              		.cfi_endproc
 1213              	.LFE40:
 1215              		.global	halls
 1216              		.section	.bss.halls,"aw",%nobits
 1217              		.align	2
 1220              	halls:
 1221 0000 000000   		.space	3
 1222              		.global	value_adc
 1223              		.section	.bss.value_adc,"aw",%nobits
 1224              		.align	2
 1227              	value_adc:
 1228 0000 00000000 		.space	4
 1229              		.global	duty
 1230              		.section	.bss.duty,"aw",%nobits
 1233              	duty:
 1234 0000 00       		.space	1
 1235              		.global	htim1
 1236              		.section	.bss.htim1,"aw",%nobits
 1237              		.align	2
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 37


 1240              	htim1:
 1241 0000 00000000 		.space	72
 1241      00000000 
 1241      00000000 
 1241      00000000 
 1241      00000000 
 1242              		.global	hdma_adc
 1243              		.section	.bss.hdma_adc,"aw",%nobits
 1244              		.align	2
 1247              	hdma_adc:
 1248 0000 00000000 		.space	68
 1248      00000000 
 1248      00000000 
 1248      00000000 
 1248      00000000 
 1249              		.global	hadc
 1250              		.section	.bss.hadc,"aw",%nobits
 1251              		.align	2
 1254              	hadc:
 1255 0000 00000000 		.space	64
 1255      00000000 
 1255      00000000 
 1255      00000000 
 1255      00000000 
 1256              		.text
 1257              	.Letext0:
 1258              		.file 3 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1259              		.file 4 "C:/Users/kroko/AppData/Roaming/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-to
 1260              		.file 5 "C:/Users/kroko/AppData/Roaming/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-to
 1261              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 1262              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 1263              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 1264              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1265              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 1266              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_adc.h"
 1267              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 1268              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 1269              		.file 14 "Core/Inc/main.h"
 1270              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 1271              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 1272              		.file 17 "<built-in>"
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 38


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:19     .text.MX_GPIO_Init:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:165    .text.MX_GPIO_Init:00000094 $d
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:172    .text.MX_DMA_Init:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:177    .text.MX_DMA_Init:00000000 MX_DMA_Init
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:222    .text.MX_DMA_Init:0000002c $d
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:227    .text.setPhases:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:233    .text.setPhases:00000000 setPhases
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:372    .text.setPhases:00000090 $d
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:1233   .bss.duty:00000000 duty
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:379    .text.Error_Handler:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:385    .text.Error_Handler:00000000 Error_Handler
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:417    .text.MX_ADC_Init:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:422    .text.MX_ADC_Init:00000000 MX_ADC_Init
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:534    .text.MX_ADC_Init:00000068 $d
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:1254   .bss.hadc:00000000 hadc
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:540    .text.MX_TIM1_Init:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:545    .text.MX_TIM1_Init:00000000 MX_TIM1_Init
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:784    .text.MX_TIM1_Init:00000100 $d
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:1240   .bss.htim1:00000000 htim1
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:790    .text.SystemClock_Config:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:796    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:900    .text.main:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:906    .text.main:00000000 main
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:1204   .text.main:00000188 $d
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:1227   .bss.value_adc:00000000 value_adc
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:1220   .bss.halls:00000000 halls
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:1217   .bss.halls:00000000 $d
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:1224   .bss.value_adc:00000000 $d
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:1234   .bss.duty:00000000 $d
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:1237   .bss.htim1:00000000 $d
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:1247   .bss.hdma_adc:00000000 hdma_adc
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:1244   .bss.hdma_adc:00000000 $d
C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s:1251   .bss.hadc:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
__aeabi_uidiv
HAL_Init
HAL_GPIO_TogglePin
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccMJODvH.s 			page 39


HAL_Delay
HAL_ADC_Start_DMA
HAL_TIM_PWM_Start
HAL_ADC_Start
HAL_GPIO_ReadPin
